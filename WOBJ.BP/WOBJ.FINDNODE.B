SUBROUTINE WOBJ.FINDNODE(INNODE,NODEPOS,NODEVALUE,RERR)
*
INCLUDE WOBJ.INCLUDE
*
* NEED TO BREAK OUR NODE REQUEST UP INTO IT'S SEPERATE PARTS
*
NODEVALUE=""
RERR=""
*
OBJECT.SEPERATOR = "."
NODES=INNODE
CONVERT OBJECT.SEPERATOR TO CHAR(254) IN NODES
*
NODEPOS=1; * WE ALWAYS START WITH THE FIRST ONE.
*
NUMBER.NODES=DCOUNT(NODES,@AM)
* We need to trick this into seeing an array as another node level
ORIG.NODES=NODES
NODES=""
FOR A=1 TO NUMBER.NODES
    NODE=ORIG.NODES<A>
    IF INDEX(NODE,"[",1) THEN
        ACTUAL.NODE=FIELD(NODE,"[",1)
        NODES<-1>=ACTUAL.NODE
        NODES<-1>=NODE
    END ELSE
        NODES<-1>=NODE
    END
NEXT A
NUMBER.NODES=DCOUNT(NODES,@AM)
IF WOBJ.DEBUG THEN PRINT "NUMBER NODES: ":NUMBER.NODES:" ":NODES
FOR A=1 TO NUMBER.NODES
	NODE=NODES<A>
    NODETYPE=JSONOBJECT(JSONOBJECT$NODETYPE)<1,NODEPOS>
	IF WOBJ.DEBUG THEN PRINT "NODE ":A:" NODE=":NODE:" NODEPOS=":NODEPOS:" NODETYPE=":NODETYPE
    BEGIN CASE
    	CASE NODETYPE="O"
            JUSTNODE=FIELD(NODE,"[",1)
   		    LOCATE JUSTNODE IN JSONOBJECT(JSONOBJECT$NODEPARTS.KEY)<1,NODEPOS> SETTING PARTPOS ELSE PARTPOS=0
        CASE NODETYPE="A"
            PARTPOS=FIELD(NODE,"[",2)
            PARTPOS=FIELD(PARTPOS,"]",1)
    END CASE
    IF WOBJ.DEBUG THEN PRINT "Partpos=":PARTPOS
    IF NOT(PARTPOS) THEN
            RERR=1
            RERR<2>="NODE: ":NODE:" NOT FOUND AT LEVEL ":NODEPOS
            IF WOBJ.DEBUG THEN PRINT RERR<2>
            RETURN
    END
	PART.VALUE=JSONOBJECT(JSONOBJECT$NODEPARTS.VALUE)<1,NODEPOS,PARTPOS>
    PART.TYPE=JSONOBJECT(JSONOBJECT$NODEPARTS.TYPE)<1,NODEPOS,PARTPOS>
    PART.FLINK=JSONOBJECT(JSONOBJECT$NODEPARTS.FLINK)<1,NODEPOS,PARTPOS>
    IF (PART.TYPE = "A" OR PART.TYPE="O") AND PART.FLINK # "" THEN
       * ADJUST OUR NODEPOS TO OUR NEW OBJECT
       IF WOBJ.DEBUG THEN PRINT "MOVING TYPE: ":PART.TYPE:" MOVING TO OBJECT ":PART.FLINK
       NODEPOS=PART.FLINK
    END ELSE
	*  NEED TO DO DECONDING
	    IF WOBJ.DEBUG THEN PRINT "PARTPOS=":PARTPOS:" VALUE=":PART.VALUE
        NODEVALUE=PART.VALUE
    END
NEXT A

RETURN
